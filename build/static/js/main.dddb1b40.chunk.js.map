{"version":3,"sources":["components/Header.js","components/Search.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Search","onChange","type","placeholder","aria-label","Table","employees","map","employee","i","key","src","picture","large","alt","name","first","last","email","Date","dob","date","toLocaleDateString","location","city","state","App","React","useState","base","setState","useEffect","axios","get","then","response","data","results","catch","error","console","warn","message","e","searchTerm","target","value","filter","includes","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAceA,MATf,WACI,OACI,6BACI,yBAAKC,UAAU,gCACX,0BAAMA,UAAU,wBAAhB,sBCkBDC,MAff,YAA+B,IAAbC,EAAY,EAAZA,SACd,OACI,6BACI,0BAAMF,UAAU,eACZ,2BACIA,UAAU,uBACVG,KAAK,SACLC,YAAY,SACZC,aAAW,SACXH,SAAUA,OCafI,MAjCf,YAA+B,IAAdC,EAAa,EAAbA,UACb,OACI,+BACI,+BACI,4BACI,4BAAI,6CACJ,4BAAI,oCACJ,4BAAI,sCACJ,4BAAI,sCACJ,4BAAI,0CAGZ,+BAEKA,EAAUC,KAAI,SAACC,EAAUC,GAAX,OACX,wBAAIC,IAAKD,EAAI,aACT,4BACI,yBAAKE,IAAKH,EAASI,QAAQC,MAAOC,IAAKN,EAASO,KAAKC,SAEzD,4BACKR,EAASO,KAAKC,MADnB,IAC2BR,EAASO,KAAKE,MAEzC,4BAAKT,EAASU,OACd,4BAAK,IAAIC,KAAKX,EAASY,IAAIC,MAAMC,sBACjC,4BACKd,EAASe,SAASC,KADvB,KAC+BhB,EAASe,SAASE,c,iBCgB1DC,MAnCf,WAAgB,IAAD,EACaC,IAAMC,SAAS,CACvCC,KAAM,GACNvB,UAAW,KAHA,mBACNmB,EADM,KACCK,EADD,KA2Bb,OAtBAH,IAAMI,WAAU,WACdC,IACGC,IAAI,yCACJC,MAAK,SAACC,GAELL,EAAS,CACPxB,UAAW6B,EAASC,KAAKC,QACzBR,KAAMM,EAASC,KAAKC,aAGvBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,KAAKF,EAAMG,cACtC,IAYD,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQzC,SAbS,SAAC0C,GACpB,IAAMC,EAAaD,EAAEE,OAAOC,MAC5BhB,EAAS,2BAEJL,GAFG,IAGNnB,UAAWmB,EAAMI,KAAKkB,QAAO,SAACvC,GAAD,OAC3BA,EAASO,KAAKC,MAAMgC,SAASJ,YAQ/B,kBAAC,EAAD,CAAOtC,UAAWmB,EAAMnB,cC1BV2C,QACW,cAA7BC,OAAO3B,SAAS4B,UAEa,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZJC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMG,c","file":"static/js/main.dddb1b40.chunk.js","sourcesContent":["// Imports from the React Library\r\nimport React from \"react\";\r\n// some boring ass header from bootstrap\r\n// Good enough for us ^.^\r\n// Creates a NavBar Header, light color, that says Employee Search\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <span className=\"navbar-brand mb-0 h1\">Employee Search</span>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\nexport default Header;","import React from \"react\";\r\n// import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n// import App from \"./App\";\r\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA?\r\n\r\n// Search function to export into App.js\r\n// onChange is to have the table change as the searchbar \r\n//onchange is called in app.js  - handleCahnge\r\nfunction Search({ onChange }) {\r\n    return (\r\n        <div>\r\n            <form className=\"form-inline\">\r\n                <input\r\n                    className=\"form-control mr-sm-2\"\r\n                    type=\"search\"\r\n                    placeholder=\"Search\"\r\n                    aria-label=\"Search\"\r\n                    onChange={onChange}\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default Search;","import React from \"react\";\r\nfunction Table({ employees }) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th><u>Profile Photo</u></th>\r\n                    <th><u>Name</u></th>\r\n                    <th><u>E-mail</u></th>\r\n                    <th><u>D.O.B.</u></th>\r\n                    <th><u>Location</u></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {/* goes through the employee database starting at index */}\r\n                {employees.map((employee, i) => (\r\n                    <tr key={i + \"-employee\"}>\r\n                        <td>\r\n                            <img src={employee.picture.large} alt={employee.name.first}></img>\r\n                        </td>\r\n                        <td>\r\n                            {employee.name.first} {employee.name.last}\r\n                        </td>\r\n                        <td>{employee.email}</td>\r\n                        <td>{new Date(employee.dob.date).toLocaleDateString()}</td>\r\n                        <td>\r\n                            {employee.location.city}, {employee.location.state}\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\nexport default Table;","// Imports\r\nimport React from \"react\";\r\nimport Header from \"./components/Header.js\";\r\nimport Search from \"./components/Search.js\";\r\nimport Table from \"./components/Table.js\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [state, setState] = React.useState({\r\n    base: [],\r\n    employees: [],\r\n  });\r\n  React.useEffect(() => {\r\n    axios\r\n      .get(\"https://randomuser.me/api/?results=50\")\r\n      .then((response) => {\r\n        // console.log(response.data.results);\r\n        setState({\r\n          employees: response.data.results,\r\n          base: response.data.results,\r\n        });\r\n      })\r\n      .catch((error) => console.warn(error.message));\r\n  }, []);\r\n  const handleChange = (e) => {\r\n    const searchTerm = e.target.value;\r\n    setState({\r\n      // automatically renders\r\n      ...state,\r\n      employees: state.base.filter((employee) =>\r\n        employee.name.first.includes(searchTerm)\r\n      ),\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Search onChange={handleChange} />\r\n      <Table employees={state.employees} />\r\n    </div>\r\n  );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}